#!/bin/bash
# Doug's installer

set -e

export TMPDIR=${TMPDIR:-/tmp/dndawso}
export INSTALL_DIR=${INSTALL_DIR:-~/usr/local}
cores=${cores:-8}


binary_path=${binary_path:-/scratch2/dndawso/dinstall_binaries}
ignore_binary=0
ignore_all_binary=0


#############################################################################
# utility functions:
unstow () {
    cd $INSTALL_DIR/stow
    stow -D $1
    rm -rf $INSTALL_DIR/stow/$1
}

dostow () {
    cd $INSTALL_DIR/stow
    rm -f $1/share/info/dir
    stow $1
}

is_stowed () {
    test -d $INSTALL_DIR/stow/$1
}

is_installed () {
    if [ ! -f $INSTALL_DIR/stow/palmetto-scripts/lib/dinstall/targets/${1}.sh ]; then
        echo "Error: is_installed called on $1 which does not exist!"
        return 1
    fi
    source $INSTALL_DIR/stow/palmetto-scripts/lib/dinstall/targets/${1}.sh
    is_installed_$1
}

# use in dependencies_satisfied_xxx like:
# require_packages name1 name2 name3 etc
require_packages () {
    while [[ $# > 0 ]]; do
        if ! is_installed $1 ; then
            echo "Package $1 is required! Attempting install..."
            # TODO: fix possible infinite loop with cyclical dependencies
            
            tmp_ignore_binary=$ignore_binary
            if [ $ignore_all_binary -eq 0 ]; then
            	ignore_binary=0
            fi
            install $1
            ignore_binary=$tmp_ignore_binary
            
            if ! is_installed $1 ; then
                echo "Package $1 is required! Failed to install!"
                return 1
            fi
        fi
        shift
    done
    return 0
}

binary_deploy_stow () {
    cd $INSTALL_DIR/stow
    tar -czvf $binary_path/${1}.tar.gz $1
}

binary_install_stow () {
    cd $INSTALL_DIR/stow
    tar -xvf $binary_path/${1}.tar.gz
    dostow $1
}

binary_available_stow () {
    test -f $binary_path/${1}.tar.gz
}


print_usage () {
    echo -e "usage: dinstall [<options>] <cmd> [<args>]"
    echo -e "for cmd = install, upgrade, or remove:"
    echo -e "\tdinstall <cmd> <name1> [<name2> ...]"
    echo -e "\tinstalls, upgrades or removes packages named name1, name2, etc"
    echo -e "for cmd = update"
    echo -e "\tdinstall update"
    echo -e "\tupdates palmetto scripts (and thus dinstall)"
    echo -e "options:"
    echo -e "\t--version : return current version and quits"
    echo -e "\t--help : prints this message and quits"
    echo -e "\t--ignore-binaries : ignores binaries, installs thge package from source (but dependencies with binaries)"
    echo -e "\t--ignore-all-binaries : ignores all binaries, always installs from source"
}


# installs a package
install () {
    if [ ! -f $INSTALL_DIR/stow/palmetto-scripts/lib/dinstall/targets/${1}.sh ]; then
        echo "Error: package $1 does not exist!"
        return
    fi
    source $INSTALL_DIR/stow/palmetto-scripts/lib/dinstall/targets/${1}.sh

    if is_installed_$1 ; then
        echo "Error: package $1 is already installed!"
        return
    fi
    if ! dependencies_satisfied_$1 ; then
        echo "Error: dependencies not satisfied for $1!"
        return
    fi

    # if the binary_available function exists then we check for binary
    if type -t binary_available_$1 &> /dev/null && [ $ignore_binary -eq 0 ]; then
        if binary_available_$1 ; then 
            echo "Installing from binary!"
            binary_install_$1
            # force bash to rethink about the path: (not sure why this is needed, but it is)
            export PATH=$PATH
            return
        fi

        echo "Installing from binary is capable but not available. Ask Doug to deploy."
        echo "Until then, making from scratch..."
    fi
    #( export PATH=$PATH;  install_$1 )
    install_$1
    # force bash to rethink about the path: (not sure why this is needed, but it is)
    export PATH=$PATH
}


uninstall () {
    if [ ! -f $INSTALL_DIR/stow/palmetto-scripts/lib/dinstall/targets/${1}.sh ]; then
        echo "Error: package $1 does not exist!"
        return
    fi
    source $INSTALL_DIR/stow/palmetto-scripts/lib/dinstall/targets/${1}.sh
    if ! is_installed_$1 ; then
        echo "Error: package $1 is not installed!"
        return
    fi
    uninstall_$1
}

upgrade () {
    uninstall $1
    install $1
}

deploy () {
    if [ ! -f $INSTALL_DIR/stow/palmetto-scripts/lib/dinstall/targets/${1}.sh ]; then
        echo "Error: package $1 does not exist!"
        return
    fi
    source $INSTALL_DIR/stow/palmetto-scripts/lib/dinstall/targets/${1}.sh
    if type -t binary_available_$1 &> /dev/null ; then
        if [ ! -d $binary_path ]; then
            mkdir -p $binary_path
        fi
        binary_deploy_$1
    else
        echo "Error: $1 is not capable of binary deploy!"
    fi
}

process_packages () {
    cmd=$1
    if [ $HOSTNAME = "user001" ]; then
        echo "Warning! you are on user node!!"
    fi

    shift
    while [[ $# > 0 ]]; do
        $cmd $1
        shift
    done
}

do_list () {
    pkgs=()
    for f in $INSTALL_DIR/stow/palmetto-scripts/lib/dinstall/targets/*.sh ; do
        p=$(basename $f)
        p=${p%.sh}
        pkgs+=($p)
    done
    if [ "$2" = "installed" ]; then
        installed_pkgs=()
        for p in "${pkgs[@]}"; do
            source $INSTALL_DIR/stow/palmetto-scripts/lib/dinstall/targets/${p}.sh
            if is_installed_$p ; then
                installed_pkgs+=($p)
            fi
        done
        echo ${installed_pkgs[@]}
    else
        echo ${pkgs[@]}
    fi
}

#############################################################################
# Process Options:

while [ "${1:0:2}" = "--" ]; do
    case $1 in
        --version)
            cd $INSTALL_DIR/stow/palmetto-scripts
            echo "version 2.0, git: $(git rev-parse --short HEAD)"
            exit 0
            ;;
        --ignore-binaries)
            echo "Ignoring binaries for this package!!"
            ignore_binary=1
            ;;
        --ignore-all-binaries)
            echo "Ignoring ALL binaries!!"
            ignore_binary=1
            ignore_all_binary=1
            ;;
        --help)
            print_usage
            exit 0
            ;;
        *)
            echo "Error unknown option: $1"
            exit 1
            ;;
    esac
    shift
done


#############################################################################
# process dinstall arguments: 
if [ "$#" -lt 1 ]; then
    echo "Not enough arguments!"
    print_usage
    exit 1
fi

if [ "$1" = "update" ]; then
    if [ "$#" -ne 1 ]; then
        echo "Wrong arguments!"
        print_usage
        exit 1
    fi
    cd $INSTALL_DIR/stow/palmetto-scripts
    git pull
    cd $INSTALL_DIR/stow
    stow palmetto-scripts
    exit 0
fi




case "$1" in
    install|uninstall|upgrade|deploy)
        process_packages $@
        ;;
    list)
        do_list $@
        ;;
    *)
        # otherwise, assume install command:
        process_packages install $@
        ;;
esac

