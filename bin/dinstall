#!/bin/bash
# Doug's installer

if [ "$#" -lt 1 ]; then
    echo "usage: dinstall <name>"
    exit 1
fi

export TMPDIR=${TMPDIR:-/tmp/dndawso}
export INSTALL_DIR=${INSTALL_DIR:-~/usr/local}
cores=${cores:-8}

uninstall () {
    echo "uninstalling $1"
    if [ -a "$INSTALL_DIR/stow/$1" ]; then
        echo "unstowing $1"
        cd $INSTALL_DIR/stow
        stow -D $1

        echo "removing dir $1"
        rm -rf $INSTALL_DIR/stow/$1
    else
        echo "not installed... nothing to do"
    fi
}

install () {
    echo "installing $1"
    cd $INSTALL_DIR/stow
    rm -f $1/share/info/dir
    stow $1
}

# caffe can't use 4.8.1, see: https://github.com/BVLC/caffe/issues/1398
if [ "$1" = "gcc" ]; then
    uninstall gcc

    cd $TMPDIR
    mkdir gcc; cd gcc

    wget http://mirrors-usa.go-parts.com/gcc/releases/gcc-4.8.2/gcc-4.8.2.tar.gz
    tar xf gcc-4.8.2.tar.gz
    mkdir gcc-4.8.2/build
    cd gcc-4.8.2/build
    ../configure --disable-multilib --prefix=$INSTALL_DIR/stow/gcc --with-mpfr=$INSTALL_DIR
    make -j$cores
    make 
    make install
    install gcc

    cd $TMPDIR
    rm -rf gcc
fi

if [ "$1" = "atlas" ]; then
    uninstall atlas

    cd $TMPDIR
    mkdir atlas; cd atlas

    wget http://iweb.dl.sourceforge.net/project/math-atlas/Stable/3.10.2/atlas3.10.2.tar.bz2
    wget http://www.netlib.org/lapack/lapack.tgz 
    tar xf atlas3.10.2.tar.bz2
    mkdir ATLAS/build
    cd ATLAS/build
    
    sed -i -e 's/ThrChk = 1/ThrChk = 0/' ../CONFIG/src/config.c
    ../configure -Fa alg -fPIC -b 64 --prefix=$INSTALL_DIR/stow/atlas --shared --with-netlib-lapack-tarfile=$TMPDIR/atlas/lapack.tgz
    make
    cd lib
    make shared cshared ptshared cptshared
    cd ..
    make check
    checkpass=$?
    make ptcheck
    ptcheckpass=$?
    if [ $checkpass = 0 -a $ptcheckpass = 0 ]; then
        make install
        ln -s $INSTALL_DIR/stow/atlas/lib/liblapack.a $INSTALL_DIR/stow/atlas/lib/liblapack_atlas.a
        ln -s $INSTALL_DIR/stow/atlas/lib/liblapack.so $INSTALL_DIR/stow/atlas/lib/liblapack_atlas.so
        install atlas
    else
        echo "Check FAILED!!! not installing!"
    fi
    cd $TMPDIR
    rm -rf atlas
fi

if [ "$1" = "hdf5" ]; then
    uninstall hdf5

    cd $TMPDIR
    mkdir hdf5; cd hdf5

    wget http://www.hdfgroup.org/ftp/HDF5/current/src/hdf5-1.8.17.tar.gz
    tar xf hdf5-1.8.17.tar.gz
    cd hdf5-1.8.17
    
    ./configure --prefix=$INSTALL_DIR/stow/hdf5
    make -j$cores
    make install

    install hdf5

    cd $TMPDIR
    rm -rf hdf5
fi

if [ "$1" = "pkgconfig" ]; then
    uninstall pkgconfig

    cd $TMPDIR
    mkdir pkgconfig; cd pkgconfig

    wget --no-check-certificate https://pkg-config.freedesktop.org/releases/pkg-config-0.29.1.tar.gz 
    tar xf pkg-config-0.29.1.tar.gz
    cd pkg-config-0.29.1
    ./configure --prefix=$INSTALL_DIR/stow/pkgconfig
    make -j$cores
    make install
    install pkgconfig

    cd $TMPDIR
    rm -rf pkgconfig
fi

if [ "$1" = "libtool" ]; then
    uninstall libtool

    cd $TMPDIR
    mkdir libtool; cd libtool

    wget http://ftp.wayne.edu/gnu/libtool/libtool-2.4.3.tar.gz
    tar xf libtool-2.4.3.tar.gz
    cd libtool-2.4.3
    ./configure --prefix=$INSTALL_DIR/stow/libtool
    make -j$cores
    make install
    install libtool

    cd $TMPDIR
    rm -rf libtool
fi

if [ "$1" = "autoconf" ]; then
    uninstall autoconf

    cd $TMPDIR
    mkdir autoconf; cd autoconf

    wget http://ftp.gnu.org/gnu/autoconf/autoconf-2.69.tar.gz
    tar xf autoconf-2.69.tar.gz
    cd autoconf-2.69
    ./configure --prefix=$INSTALL_DIR/stow/autoconf
    make -j$cores
    make install
    install autoconf

    cd $TMPDIR
    rm -rf autoconf
fi

if [ "$1" = "automake" ]; then
    uninstall automake

    cd $TMPDIR
    mkdir automake; cd automake

    wget http://ftp.gnu.org/gnu/automake/automake-1.15.tar.gz 
    tar xf automake-1.15.tar.gz
    cd automake-1.15
    ./configure --prefix=$INSTALL_DIR/stow/automake
    make -j$cores
    make install
    install automake

    cd $TMPDIR
    rm -rf automake
fi

if [ "$1" = "freetype" ]; then
    uninstall freetype

    cd $TMPDIR
    mkdir freetype; cd freetype

    wget http://download.savannah.gnu.org/releases/freetype/freetype-2.4.12.tar.gz
    tar xf freetype-2.4.12.tar.gz
    cd freetype-2.4.12
    export CC=gcc
    ./configure --prefix=$INSTALL_DIR/stow/freetype
    make -j$cores
    make install
    install freetype

    cd $TMPDIR
    rm -rf freetype
fi

if [ "$1" = "mpfr" ]; then
    uninstall mpfr

    cd $TMPDIR
    mkdir mpfr; cd mpfr

    wget ftp://gcc.gnu.org/pub/gcc/infrastructure/mpfr-3.1.4.tar.bz2
    tar xf mpfr-3.1.4.tar.bz2
    cd mpfr-3.1.4
    ./configure CFLAGS="-O2" CXXFLAGS="-O2" --prefix=$INSTALL_DIR/stow/mpfr
    make -j$cores
    make 
    make install
    install mpfr

    cd $TMPDIR
    rm -rf mpfr
fi

if [ "$1" = "mpc" ]; then
    uninstall mpc

    cd $TMPDIR
    mkdir mpc; cd mpc

    wget ftp://gcc.gnu.org/pub/gcc/infrastructure/mpc-1.0.3.tar.gz
    tar xf mpc-1.0.3.tar.gz
    cd mpc-1.0.3
    ./configure --with-mpfr=$INSTALL_DIR --prefix=$INSTALL_DIR/stow/mpc
    make -j$cores
    make 
    make install
    install mpc

    cd $TMPDIR
    rm -rf mpc
fi

if [ "$1" = "cmake" ]; then
    uninstall cmake
    cd $TMPDIR
    
    wget --no-check-certificate http://cmake.org/files/v3.5/cmake-3.5.2.tar.gz    
    tar xf cmake-3.5.2.tar.gz
    cd cmake-3.5.2
    cmake -DCMAKE_INSTALL_PREFIX=$INSTALL_DIR/stow/cmake \
        -DCMAKE_PREFIX_PATH=$INSTALL_DIR .
    make -j$cores
    make install

    install cmake

    cd $TMPDIR
    rm -rf cmake-3.5.2
fi

if [ "$1" = "postgresql" ]; then
    uninstall postgresql
    cd $TMPDIR
    
    wget https://ftp.postgresql.org/pub/source/v9.3.13/postgresql-9.3.13.tar.gz
    tar xf postgresql-9.3.13.tar.gz
    cd postgresql-9.3.13
    ./configure --prefix=$INSTALL_DIR/stow/postgresql
    make -j$cores
    make install

    install postgresql

    cd $TMPDIR
    rm -rf postgresql-9.3.13
fi


if [ "$1" = "opencv" ]; then
    uninstall opencv

    cd $TMPDIR

    git clone https://github.com/Itseez/opencv.git
    cd opencv
    mkdir build
    cd build
    cmake -DCMAKE_INSTALL_PREFIX=$INSTALL_DIR/stow/opencv \
        -DCMAKE_PREFIX_PATH=$INSTALL_DIR  -DBUILD_JPEG=ON \
        -DBUILD_JASPER=ON -DBUILD_TIFF=ON -DWITH_IPP=OFF ..
    make -j$cores
    make install

    install opencv

    cd $TMPDIR
    rm -rf opencv
fi

if [ "$1" = "leveldb" ]; then
    uninstall leveldb

    cd $TMPDIR
    git clone https://github.com/google/leveldb.git
    cd leveldb
    
    #see https://github.com/google/leveldb/issues/340 :
    sed -i -e 's/std::uint64_t/uint64_t/' db/recovery_test.cc
    
    make -j$cores
    mkdir -p $INSTALL_DIR/stow/leveldb/lib
    mkdir -p $INSTALL_DIR/stow/leveldb/include
    cp --preserve=links out-shared/libleveldb.* $INSTALL_DIR/stow/leveldb/lib
    cp -r include/leveldb $INSTALL_DIR/stow/leveldb/include
    cd ..

    install leveldb

    cd $TMPDIR
    rm -rf leveldb
fi


if [ "$1" = "gflags" ]; then
    uninstall gflags

    cd $TMPDIR
    git clone https://github.com/schuhschuh/gflags.git
    mkdir gflags/build
    cd gflags/build
    cmake -DCMAKE_INSTALL_PREFIX=$INSTALL_DIR/stow/gflags \
       -DCMAKE_PREFIX_PATH=$INSTALL_DIR -DBUILD_SHARED_LIBS=ON ..
    make -j$cores
    make install

    install gflags

    cd $TMPDIR
    rm -rf gflags
fi

if [ "$1" = "protobuf" ]; then
    uninstall protobuf

    cd $TMPDIR
    git clone https://github.com/google/protobuf.git
    cd protobuf
    ./autogen.sh
    ./configure --prefix=$INSTALL_DIR/stow/protobuf
    make -j$cores
    make install

    install protobuf

    cd $TMPDIR/protobuf/python
    python setup.py install --user

    cd $TMPDIR
    rm -rf protobuf
fi

if [ "$1" = "glog" ]; then
    uninstall glog

    cd $TMPDIR
    git clone https://github.com/google/glog.git
    mkdir glog/build
    cd glog/build
    cmake -DCMAKE_INSTALL_PREFIX=$INSTALL_DIR/stow/glog \
       -DCMAKE_PREFIX_PATH=$INSTALL_DIR -DBUILD_SHARED_LIBS=ON ..
    make -j$cores
    make install

    install glog

    cd $TMPDIR
    rm -rf glog
fi

if [ "$1" = "lmdb" ]; then
    uninstall lmdb

    cd $TMPDIR
    # old:
    #git clone https://gitorious.org/mdb/mdb.git
    git clone https://github.com/wizawu/lmdb.git 
    cd lmdb/libraries/liblmdb
    sed -i -e "s|prefix.*=.*$|prefix = $INSTALL_DIR/stow/lmdb|" Makefile
    mkdir -p $INSTALL_DIR/stow/lmdb/man
    mkdir -p $INSTALL_DIR/stow/lmdb/bin
    mkdir -p $INSTALL_DIR/stow/lmdb/include
    mkdir -p $INSTALL_DIR/stow/lmdb/lib
    make -j$cores
    make install

    install lmdb

    cd $TMPDIR
    rm -rf lmdb
fi

if [ "$1" = "snappy" ]; then
    uninstall snappy

    cd $TMPDIR
    git clone https://github.com/google/snappy.git
    cd snappy
    ./autogen.sh
    ./configure --prefix=$INSTALL_DIR/stow/snappy
    make -j$cores
    make install

    install snappy

    cd $TMPDIR
    rm -rf snappy
fi

if [ "$1" = "python27" ]; then
    uninstall python27

    cd $TMPDIR
    mkdir python27; cd python27
    wget https://www.python.org/ftp/python/2.7.11/Python-2.7.11.tgz
    tar -xf Python-2.7.11.tgz
    cd Python-2.7.11
    ./configure --prefix=$INSTALL_DIR/stow/python27 --enable-shared
    make -j$cores
    make install

    install python27

    cd $TMPDIR
    wget https://bootstrap.pypa.io/ez_setup.py -O - | python - --user

    rm -rf python27
fi

if [ "$1" = "numpy" ]; then
    cd $TMPDIR
    mkdir numpy; cd numpy

    python -m pip install -U cython

    git clone git://github.com/numpy/numpy.git numpy
    cd numpy
    python setup.py install --user
    cd ..

    cd $TMPDIR
    rm -rf numpy
fi

if [ "$1" = "ipdb" ]; then
    cd $TMPDIR
    mkdir ipdb; cd ipdb

    wget https://pypi.python.org/packages/source/i/ipdb/ipdb-0.9.0.tar.gz
    tar xf ipdb-0.9.0.tar.gz
    cd ipdb-0.9.0
    python setup.py install --user
    cd ..

    cd $TMPDIR
    rm -rf ipdb
fi

if [ "$1" = "pip" ]; then
    cd $TMPDIR
    mkdir pip; cd pip

    wget https://bootstrap.pypa.io/get-pip.py 
    python get-pip.py

    cd $TMPDIR
    rm -rf pip
fi

if [ "$1" = "boost" ]; then
    uninstall boost

    cd $TMPDIR
    mkdir boost; cd boost
    wget http://iweb.dl.sourceforge.net/project/boost/boost/1.60.0/boost_1_60_0.tar.gz
    tar xf boost_1_60_0.tar.gz
    cd boost_1_60_0

    # See: https://svn.boost.org/trac/boost/ticket/11852
    sed -i -e '156s/$/ \&\& !defined(__CUDACC__)/' boost/config/compiler/gcc.hpp
    
    ./bootstrap.sh --prefix=$INSTALL_DIR/stow/boost
    ./b2 -j$cores install

    install boost

    cd $TMPDIR
    rm -rf boost
fi

if [ "$1" = "cudnn" ]; then
    uninstall cudnn

    cd $TMPDIR
    mkdir $INSTALL_DIR/stow/cudnn
    cp /home/wbgreen/cudnn-7.5-linux-x64-v5.0-ga.tgz .
    tar -xzvf cudnn-7.5-linux-x64-v5.0-ga.tgz
    
    cd cuda
    cp -r * $INSTALL_DIR/stow/cudnn

    install cudnn

    cd $TMPDIR
    rm -rf cudnn
fi

if [ "$1" = "caffe" ]; then
    uninstall caffe

    cd $TMPDIR

    git clone https://github.com/BVLC/caffe.git
    mkdir caffe/build
    cd caffe/build
    cmake -DCMAKE_INSTALL_PREFIX=$INSTALL_DIR/stow/caffe \
       -DCMAKE_PREFIX_PATH=$INSTALL_DIR -DBOOST_ROOT=$INSTALL_DIR \
       -DBLAS=MKL -DINTEL_ROOT=/software/intel/composer_xe_2015 \
       -DPYTHON_LIBRARY=$INSTALL_DIR/lib/libpython2.7.so \
       -DPYTHON_INCLUDE_DIR=$INSTALL_DIR/include/python2.7 \
       -DPROTOBUF_INCLUDE_DIR=$INSTALL_DIR/include \
       -DPROTOBUF_LIBRARY=$INSTALL_DIR/lib/libprotobuf.so \
       -DPROTOBUF_PROTOC_LIBRARY=$INSTALL_DIR/lib/libprotoc.so ..
    make -j$cores
    make install

    install caffe

    cd $TMPDIR
    rm -rf caffe
fi

if [ "$1" = "caffe_cudnn" ]; then
    uninstall caffe

    cd $TMPDIR

    git clone https://github.com/BVLC/caffe.git
    mkdir caffe/build
    cd caffe/build
    cmake -DCMAKE_INSTALL_PREFIX=$INSTALL_DIR/stow/caffe \
       -DCMAKE_PREFIX_PATH=$INSTALL_DIR -DBOOST_ROOT=$INSTALL_DIR \
       -DBLAS=MKL -DINTEL_ROOT=/software/intel/composer_xe_2015 \
       -DPYTHON_LIBRARY=$INSTALL_DIR/lib/libpython2.7.so \
       -DPYTHON_INCLUDE_DIR=$INSTALL_DIR/include/python2.7 \
       -DPROTOBUF_INCLUDE_DIR=$INSTALL_DIR/include \
       -DPROTOBUF_LIBRARY=$INSTALL_DIR/lib/libprotobuf.so \
       -DPROTOBUF_PROTOC_LIBRARY=$INSTALL_DIR/lib/libprotoc.so \
       -DCUDNN_ROOT=$INSTALL_DIR ..
    make -j$cores
    make install
	
    cd ..
    mkdir $INSTALL_DIR/stow/caffe/caffe
    cp -r data/ $INSTALL_DIR/stow/caffe/caffe
    cp -r models/ $INSTALL_DIR/stow/caffe/caffe
    cp -r examples/ $INSTALL_DIR/stow/caffe/caffe
    cp -r tools/ $INSTALL_DIR/stow/caffe/caffe
    cp -r scripts/ $INSTALL_DIR/stow/caffe/caffe
    cd build

    install caffe

    cd $TMPDIR
    rm -rf caffe
fi

if [ "$1" = "caffe_ces" ]; then
    uninstall caffe

    cd $TMPDIR

    git clone https://github.com/BVLC/caffe.git
    mkdir caffe/build
    cd caffe/build
    export Atlas_ROOT_DIR=$INSTALL_DIR
    cmake -DCMAKE_INSTALL_PREFIX=$INSTALL_DIR/stow/caffe \
       -DCMAKE_PREFIX_PATH=$INSTALL_DIR -DBOOST_ROOT=$INSTALL_DIR \
       -DPYTHON_LIBRARY=$INSTALL_DIR/lib/libpython2.7.so \
       -DPYTHON_INCLUDE_DIR=$INSTALL_DIR/include/python2.7 \
       -DPROTOBUF_INCLUDE_DIR=$INSTALL_DIR/include \
       -DPROTOBUF_LIBRARY=$INSTALL_DIR/lib/libprotobuf.so \
       -DPROTOBUF_PROTOC_LIBRARY=$INSTALL_DIR/lib/libprotoc.so \
       -DCUDA_ARCH_NAME=Fermi ..
    make -j$cores
    make install

    install caffe

    cd $TMPDIR
    rm -rf caffe
fi


if [ "$1" = "gdal" ]; then
    uninstall gdal

    cd $TMPDIR

    mkdir gdal; cd gdal
    wget http://download.osgeo.org/gdal/2.0.2/gdal-2.0.2.tar.gz
    tar xf gdal-2.0.2.tar.gz
    cd gdal-2.0.2
    ./configure --prefix=$INSTALL_DIR/stow/gdal
    make -j$cores
    make install

    install gdal

    cd $TMPDIR
    rm -rf gdal
fi

if [ "$1" = "libpqxx" ]; then
    uninstall libpqxx

    cd $TMPDIR

    mkdir libpqxx; cd libpqxx
    wget http://pqxx.org/download/software/libpqxx/libpqxx-4.0.1.tar.gz
    tar xf libpqxx-4.0.1.tar.gz
    cd libpqxx-4.0.1
    ./configure --prefix=$INSTALL_DIR/stow/libpqxx
    make
    make install

    install libpqxx

    cd $TMPDIR
    rm -rf libpqxx
fi

if [ "$1" = "bazel" ]; then
    uninstall bazel

    cd $TMPDIR
    module add java/1.8.0

    mkdir tmpbin
    cat > tmpbin/gcc <<- EOF
#!/bin/bash
export LD_LIBRARY_PATH=$INSTALL_DIR/lib64:$INSTALL_DIR/lib:/software/gcc/4.8.1/lib64:/software/mpc/0.8.1/lib:/software/mpfr/2.4.2/lib:/software/gmp/4.3.2/lib:/usr/lib64/nvidia:/software/cuda-toolkit/7.5.18/lib64:/software/cuda-toolkit/7.5.18/lib:/software/cuda-toolkit/7.5.18/open64/lib:/usr/lib/nvidia:/opt/orangefs/lib:/opt/mx/lib 
$INSTALL_DIR/stow/gcc/bin/gcc "\$@"
EOF
    chmod +x tmpbin/gcc

    git clone https://github.com/dougnd/bazel.git
    cd bazel
    PATH=$TMPDIR/tmpbin:$PATH ./compile.sh

    mkdir -p $INSTALL_DIR/stow/bazel/bin
    cp output/bazel $INSTALL_DIR/stow/bazel/bin/


    install bazel

    cd $TMPDIR
    rm -rf bazel
    rm -rf tmpbin
fi

if [ "$1" = "tensorflow" ]; then
    python -m pip uninstall tensorflow

    cd $TMPDIR
    module add java/1.8.0


    echo "making a wrapper for gcc and python..."
    mkdir tmpbin
    cat > tmpbin/gcc <<- EOF
#!/bin/bash
export LD_LIBRARY_PATH=$LD_LIBRARY_PATH
$INSTALL_DIR/stow/gcc/bin/gcc "\$@"
EOF
    chmod +x tmpbin/gcc
    cat > tmpbin/python <<- EOF
#!/bin/bash
export LD_LIBRARY_PATH=$LD_LIBRARY_PATH
$INSTALL_DIR/bin/python "\$@"
EOF
    chmod +x tmpbin/python
    export PATH=$TMPDIR/tmpbin:$PATH

    echo "Getting tensorflow..."
    git clone https://github.com/dougnd/tensorflow
    cd tensorflow

    echo "Configuring tensorflow..."
    export PYTHON_BIN_PATH=$TMPDIR/tmpbin/python
    export TF_NEED_GCP=0
    export TF_NEED_CUDA=1
    export GCC_HOST_COMPILER_PATH=$TMPDIR/tmpbin/gcc
    export TF_CUDA_VERSION=7.5.18
    export CUDA_TOOLKIT_PATH=/software/cuda-toolkit/7.5.18
    export TF_CUDNN_VERSION=5.0.5
    export CUDNN_INSTALL_PATH=$INSTALL_DIR
    # k40, k20:
    export TF_CUDA_COMPUTE_CAPABILITIES=3.5
    module add java/1.8.0
    ./configure

    echo "wrapping their gcc wrapper (lol -- so sketchy)"
    mv third_party/gpus/crosstool/clang/bin/crosstool_wrapper_driver_is_not_gcc third_party/gpus/crosstool/clang/bin/crosstool_wrapper_driver_is_not_gcc_fake
    cat > third_party/gpus/crosstool/clang/bin/crosstool_wrapper_driver_is_not_gcc <<- EOF
#!/bin/bash
export LD_LIBRARY_PATH=$LD_LIBRARY_PATH
export PATH=$PATH
#echo "CWD: \$(pwd)"
#echo "CMD: $TMPDIR/tensorflow/third_party/gpus/crosstool/clang/bin/crosstool_wrapper_driver_is_not_gcc_fake \$@ --cuda_log"
$TMPDIR/tensorflow/third_party/gpus/crosstool/clang/bin/crosstool_wrapper_driver_is_not_gcc_fake "\$@" -D_GLIBCXX_USE_C99
EOF
    chmod +x third_party/gpus/crosstool/clang/bin/crosstool_wrapper_driver_is_not_gcc
    sed -i "s/cmd = 'PATH='/#cmd = 'PATH='/" third_party/gpus/crosstool/clang/bin/crosstool_wrapper_driver_is_not_gcc_fake

    echo "Fixing crosstool..."
    function addToCROSSTOOL () {
        awk -v "toInsert=$1" '/cxx_builtin_include_directory/ && !x {print toInsert; x=1} 1' third_party/gpus/crosstool/CROSSTOOL > tmpCROSSFILE && mv tmpCROSSFILE third_party/gpus/crosstool/CROSSTOOL
    }
    addToCROSSTOOL "  cxx_builtin_include_directory: \"$INSTALL_DIR/stow/gcc/include\""
    addToCROSSTOOL "  cxx_builtin_include_directory: \"$INSTALL_DIR/stow/gcc/lib/gcc\""
    addToCROSSTOOL "  cxx_builtin_include_directory: \"$TMPDIR/tensorflow/third_party/gpus/cuda/include\""
    for path in ${LD_LIBRARY_PATH//:/ }; do
        addToCROSSTOOL "  linker_flag: \"-Wl,-rpath,$path\""
        addToCROSSTOOL "  linker_flag: \"-L$path\""
    done

    echo "building tensorflow..."
    #bazel --output_base=$TMPDIR/tf_cache build -c opt --config=cuda //tensorflow/cc:tutorials_example_trainer --verbose_failures
    bazel --output_base=$TMPDIR/tf_cache build -c opt --config=cuda //tensorflow/tools/pip_package:build_pip_package --verbose_failures
    bazel-bin/tensorflow/tools/pip_package/build_pip_package $TMPDIR/tensorflow_pkg

    echo "installing tensorflow..."
    python -m pip install -U $TMPDIR/tensorflow_pkg/tensorflow-*.whl


    cd $TMPDIR
    rm -rf tensorflow
    rm -rf tmpbin
fi


if [ "$1" = "stow" ]; then
    uninstall stow

    cd $TMPDIR
    mkdir stow; cd stow
    wget http://ftp.gnu.org/gnu/stow/stow-latest.tar.gz
    tar xf stow-latest.tar.gz
    cd stow-*
    ./configure --prefix=$INSTALL_DIR
    if [ $? -ne 0 ]; then
        echo "Error"
        echo "Try running:"
        echo "  cpan App::cpanminus"
        echo "  source ~/.bashrc"
        echo "  cpanm Test::Output"
        cd $TMPDIR
        rm -rf stow
        exit 1

    fi
    make
    make install prefix=$INSTALL_DIR/stow/stow

    cd $INSTALL_DIR/stow
    export PERL5LIB=$INSTALL_DIR/stow/stow/share/perl5:$INSTALL_DIR/stow/stow/share/perl/5.14.2:$PERL5LIB
    stow/bin/stow -vv stow

    cd $TMPDIR
    rm -rf stow
fi
